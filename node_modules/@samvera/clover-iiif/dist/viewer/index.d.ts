// Generated by dts-bundle-generator v8.0.1

import { InternationalString } from '@iiif/presentation-3';
import { IncomingHttpHeaders } from 'http';
import { Options as OpenSeadragonOptions } from 'openseadragon';
import React from 'react';

export type AutoScrollSettings = {
	behavior: string;
	block: string;
};
export type AutoScrollOptions = {
	enabled: boolean;
	settings: AutoScrollSettings;
};
export type ViewerConfigOptions = {
	annotationOverlays?: OverlayOptions;
	background?: string;
	canvasBackgroundColor?: string;
	canvasHeight?: string;
	contentSearch?: {
		searchResultsLimit?: number;
		overlays?: OverlayOptions;
	};
	ignoreCaptionLabels?: string[];
	informationPanel?: {
		open?: boolean;
		renderAbout?: boolean;
		renderSupplementing?: boolean;
		renderToggle?: boolean;
		renderAnnotation?: boolean;
		vtt?: {
			autoScroll?: AutoScrollOptions | AutoScrollSettings | boolean;
		};
		renderContentSearch?: boolean;
		defaultTab?: string;
	};
	openSeadragon?: OpenSeadragonOptions;
	requestHeaders?: IncomingHttpHeaders;
	showDownload?: boolean;
	showIIIFBadge?: boolean;
	showTitle?: boolean;
	withCredentials?: boolean;
	localeText?: {
		contentSearch?: {
			tabLabel?: string;
			formPlaceholder?: string;
			noSearchResults?: string;
			loading?: string;
			moreResults?: string;
		};
	};
};
export type OverlayOptions = {
	backgroundColor?: string;
	borderColor?: string;
	borderType?: string;
	borderWidth?: string;
	opacity?: string;
	renderOverlays?: boolean;
	zoomLevel?: number;
};
export type CustomDisplay = {
	display: {
		component: React.ElementType;
		componentProps?: Record<string, unknown>;
	};
	target: {
		canvasId?: string[];
		paintingFormat?: string[];
	};
};
export type PluginConfig = {
	id: string;
	imageViewer?: {
		controls?: {
			component: React.ElementType;
			componentProps?: Record<string, unknown>;
		};
	};
	informationPanel?: {
		component: React.ElementType;
		componentProps?: Record<string, unknown>;
		label: InternationalString;
	};
};
export type ContentSearchQuery = {
	q: string;
	motivation?: string;
	date?: string;
	user?: string;
};
export interface CloverViewerProps {
	canvasIdCallback?: (arg0: string) => void;
	customDisplays?: Array<CustomDisplay>;
	plugins?: Array<PluginConfig>;
	customTheme?: any;
	iiifContent: string;
	id?: string;
	manifestId?: string;
	options?: ViewerConfigOptions;
	iiifContentSearchQuery?: ContentSearchQuery;
}
declare const CloverViewer: React.FC<CloverViewerProps>;

export {
	CloverViewer as default,
};

export {};
